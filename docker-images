#!/usr/bin/env python3

from sys import argv
from collections import namedtuple
from os import listdir
import pathlib as pl
import networkx as nx
from dockerfile_parse import DockerfileParser
import subprocess as sp
import termcolor as tc
import yaml
import docker
import json
import sys

class Docker:

    def __init__(self):
        self._client = docker.APIClient(base_url='unix://var/run/docker.sock')

    def build(self, image):
        for line in self._client.build(path=str(image.folder_path)):
            object = json.loads(line)
            try:
                sys.stdout.write(object["stream"])
                sys.stdout.flush()
            except KeyError as e:
                pass

class ImageGraph:

    def __init__(self, nx_graph):
        self._nx_graph = nx_graph

    @property
    def images(self):
        return [image for image in nx.topological_sort(self._nx_graph)]

    @classmethod
    def for_projects(cls, projects):
        images = []
        for project in projects:
            images.extend(project.images)

        nx_graph = nx.DiGraph()
        for image in images:
            nx_graph.add_node(image)

        for image in images:
            base_image_name = Image.base_image_name(image)
            base_image = None
            try:
                base_image = [image for image in images if image.name == base_image_name][0]
                nx_graph.add_edge(base_image, image)
            except IndexError as e:
                pass

        return ImageGraph(nx_graph)

class Project:

    def __init__(self, folder_path):
        self._folder_path = folder_path

    @classmethod
    def in_folder(cls, folder_path):
        return cls(folder_path)

    @property
    def folder_path(self):
        return self._folder_path

    @property
    def name(self):
        try:
            return self._manifest["project"]["name"]
        except KeyError as e:
            return self._folder_path.name

    @property
    def _manifest_file_path(self):
        return self._folder_path / "manifest.yml"

    @property
    def _manifest(self):
        if self._manifest_file_path.exists():
            with self._manifest_file_path.open() as manifest_file:
                yaml_content = manifest_file.read()
                manifest = yaml.load(yaml_content)
                return manifest
        return {}

    @property
    def version(self):
        try:
            return self._manifest["project"]["version"]
        except KeyError as e:
            return "latest"

    @property
    def images(self):
        images = []
        for dockerfile_file_path in self.folder_path.glob("**/Dockerfile"):
            image_folder_path = dockerfile_file_path.parent
            name = self.name if image_folder_path == self.folder_path else f"{self.name}-{image_folder_path.name}"
            images.append(Image(image_folder_path, f"{name}:{self.version}"))
        return images


def list_projects(folder_path):
    projects = []
    for sub_folder_path in folder_path.iterdir():
        if sub_folder_path.is_dir() and not sub_folder_path.name.startswith("."):
            projects.append(Project.in_folder(sub_folder_path))
    return projects


class Image:

    def __init__(self, folder_path, name):
        self._folder_path = folder_path
        self._name = name

    @classmethod
    def base_image_name(cls, image):
        dockerfile_file_path = image.folder_path / "Dockerfile"
        docker_file_parser = DockerfileParser()
        with dockerfile_file_path.open() as dockerfile:
            docker_file_parser.content = dockerfile.read()
        return docker_file_parser.baseimage

    @property
    def name(self):
        return self._name

    @property
    def folder_path(self):
        return self._folder_path

    @property
    def project(self):
        return self._project

    def __repr__(self):
        return str(self)

    def __str__(self):
        return f"Image({self.folder_path}, {self.name})"


def main(arguments):
    image_graph = ImageGraph.for_projects(list_projects(pl.Path(".")))
    docker = Docker()
    for image in image_graph.images:
        print(tc.colored(f"Building {image.name}... ", "blue"))
        docker.build(image)
        print()


if __name__ == "__main__":
    main(argv)
